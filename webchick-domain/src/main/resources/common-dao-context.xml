<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

    <bean id="daoParent" abstract="true">
        <constructor-arg type="com.agrologic.app.dao.DaoFactory" ref="daoFactory"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="validateExistingTransaction" value="true"/>
    </bean>

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="alarmTxPointcut" expression="within(com.agrologic.app.dao.AlarmDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="alarmTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="programAlarmTxPointcut" expression="within(com.agrologic.app.dao.ProgramAlarmDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="programAlarmTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="relayTxPointcut" expression="within(com.agrologic.app.dao.RelayDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="relayTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="programRelayTxPointcut" expression="within(com.agrologic.app.dao.ProgramRelayDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="programRelayTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="systemStateTxPointcut" expression="within(com.agrologic.app.dao.SystemStateDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="systemStateTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="programSystemStateTxPointcut"
                      expression="within(com.agrologic.app.dao.ProgramSystemStateDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="programSystemStateTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="programTxPointcut" expression="within(com.agrologic.app.dao.ProgramDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="programTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="screenTxPointcut" expression="within(com.agrologic.app.dao.ScreenDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="screenTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="tableTxPointcut" expression="within(com.agrologic.app.dao.TableDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="tableTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="dataTxPointcut" expression="within(com.agrologic.app.dao.DataDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="dataTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="controllerTxPointcut" expression="within(com.agrologic.app.dao.ControllerDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="controllerTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="cellinkTxPointcut" expression="within(com.agrologic.app.dao.CellinkDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="cellinkTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="userTxPointcut" expression="within(com.agrologic.app.dao.UserDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="userTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="actionsetTxPointcut" expression="within(com.agrologic.app.dao.ActionSetDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="actionsetTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="distribTxPointcut" expression="within(com.agrologic.app.dao.DistribDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="distribTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="domainTxPointcut" expression="within(com.agrologic.app.dao.DomainDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="domainTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="flockTxPointcut" expression="within(com.agrologic.app.dao.FlockDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="flockTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="feedTxPointcut" expression="within(com.agrologic.app.dao.FeedDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="feedTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="feedtypeTxPointcut" expression="within(com.agrologic.app.dao.FeedTypeDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="feedtypeTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="fuelTxPointcut" expression="within(com.agrologic.app.dao.FuelDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="fuelTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="gasTxPointcut" expression="within(com.agrologic.app.dao.GasDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="gasTxPointcut"/>
    </aop:config>


    <aop:config>
        <aop:pointcut id="historysettingTxPointcut" expression="within(com.agrologic.app.dao.HistorySettingDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="historysettingTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="laborTxPointcut" expression="within(com.agrologic.app.dao.LaborDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="laborTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="languageTxPointcut" expression="within(com.agrologic.app.dao.LanguageDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="languageTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="medicineTxPointcut" expression="within(com.agrologic.app.dao.MedicineDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="medicineTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="spreadTxPointcut" expression="within(com.agrologic.app.dao.SpreadDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="spreadTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="transactionTxPointcut" expression="within(com.agrologic.app.dao.TransactionDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionTxPointcut"/>
    </aop:config>

    <aop:config>
        <aop:pointcut id="workerTxPointcut" expression="within(com.agrologic.app.dao.WorkerDao+)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="workerTxPointcut"/>
    </aop:config>

    <!--We're wrapping our underlying data source with lazy one so that connection is not retrieved from the pool unless-->
    <!--it's really necessary. E.g. if Hibernate hits only cache, there is no need to fetch connection, but without lazy-->
    <!--data source, it will be actually fetched if i18n methods are marked with @Transactional-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="defaultTransactionIsolationName" value="TRANSACTION_READ_COMMITTED"/>
        <property name="defaultAutoCommit" value="false"/>
        <property name="targetDataSource">
            <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
                <property name="driverClass" value="${jdbc.driver}"/>
                <property name="jdbcUrl" value="${jdbc.url}"/>
                <property name="user" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>
                <property name="acquireRetryAttempts" value="1"/>
                <!--Every hour we'll be hitting DB to make sure MySQL doesn't kill the connection. By default if connection
                    is idle for 8 hrs, MySQL kills it-->
                <property name="idleConnectionTestPeriod" value="3600"/>
                <!--This option is useful if threads are waiting for the connection from pool. Without this threads would wait
                forever and you're risking to get your app down if all the threads stuck.-->
                <property name="checkoutTimeout" value="10000"/>
            </bean>
        </property>
    </bean>

    <!--&lt;!&ndash;Создаем Ленивый DataSource, который по возможности не будет вытягивать настоящее&ndash;&gt;-->
    <!--&lt;!&ndash;соединение к БД из настоящего пула до тех пор пока это правда необходимо. Например, &ndash;&gt;-->
    <!--&lt;!&ndash;если Hibernate достает данные из кеша и не делает запрос в БД, нам не нужно&ndash;&gt;-->
    <!--&lt;!&ndash;настоящее соединение. Однако если не использовать ленивый DataSource, то соединение&ndash;&gt;-->
    <!--&lt;!&ndash;будет вытянуто и транзакция будет начата если метод помечен @Transactional&ndash;&gt;-->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">-->
        <!--<property name="defaultTransactionIsolationName" value="TRANSACTION_READ_COMMITTED"/>-->
        <!--<property name="defaultAutoCommit" value="false"/>-->
        <!--<property name="targetDataSource">-->
            <!--&lt;!&ndash;Это собственно настоящий DB Pool. Многие говорят что пул, который Hibernate&ndash;&gt;-->
            <!--&lt;!&ndash;использует по умолчанию не является серьезным и использование его в production&ndash;&gt;-->
            <!--&lt;!&ndash;коде не допустимо. Однако C3P0 как раз не является пулом по умочанию, у Hibernate &ndash;&gt;-->
            <!--&lt;!&ndash;есть свой внутренний пул для "поиграться", однако это не C3P0 как многие думают! С другими&ndash;&gt;-->
            <!--&lt;!&ndash;же пулами не сравнивал на самом деле, поэтому не могу сказать какой лучше,&ndash;&gt;-->
            <!--&lt;!&ndash;C3P0 используется исторически во многих приложениях с Hibernate. &ndash;&gt;-->
            <!--<bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
                <!--<property name="driverClass" value="${jdbc.driver}"/>-->
                <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
                <!--<property name="user" value="${jdbc.user}"/>-->
                <!--<property name="password" value="${jdbc.password}"/>-->
                <!--&lt;!&ndash;Эта опция показывает сколько PreparedStatement'ов должно быть закешировано&ndash;&gt;-->
                <!--&lt;!&ndash;на стороне Java, в самом Connection Pool. Имейте в виду что СУБД может &ndash;&gt;-->
                <!--&lt;!&ndash;требовать дополнительной настройки для того чтоб эта опция показала себя эффективной&ndash;&gt;-->
                <!--<property name="maxStatements" value="1500"/>-->
                <!--&lt;!&ndash;А это сколько PreparedStatement'ов каждое соединение может кешировать для себя &ndash;&gt;-->
                <!--<property name="maxStatementsPerConnection" value="50"/>-->
                <!--&lt;!&ndash;Вот это самая сложная опция и для того чтоб ее правильно настроить,&ndash;&gt;-->
                <!--&lt;!&ndash;нам нужны нагрузочные тесты а также рабочее в PROD приложение&ndash;&gt;-->
                <!--&lt;!&ndash;Есть разные стратегии по работе с соединениями которые влияют на оптимальный&ndash;&gt;-->
                <!--&lt;!&ndash;размер DB Pool'a, подробней читайте прекрасную книгу Release It!&ndash;&gt;-->
                <!--<property name="maxPoolSize" value="50"/>-->
                <!--&lt;!&ndash;MySQL прибивает соединение если оно не использовалось какое-то время.&ndash;&gt;-->
                <!--&lt;!&ndash;По умолчанию это 8 часов. Дабы избежать неприятных исключений нам &ndash;&gt;-->
                <!--&lt;!&ndash;нужно бомбардировать MySQL запросами каждый N часов (минут)&ndash;&gt;-->
                <!--<property name="idleConnectionTestPeriod" value="3600"/>-->
                <!--&lt;!&ndash;Если мы испытываем большую нагрузку и/или запросы выполняются очень долго,&ndash;&gt;-->
                <!--&lt;!&ndash;мы сможем обслуживать 50 пользователей одновременно (размер пула), однако &ndash;&gt;-->
                <!--&lt;!&ndash;при увеличении нагрузки, клиенты начнут выстраиваться в очередь и просто ждать&ndash;&gt;-->
                <!--&lt;!&ndash;заблокированные в synchronized методах внутри DB Pool'a. Дабы мы не оказались&ndash;&gt;-->
                <!--&lt;!&ndash;в ситуации, когда мы заблокированы надолго и приложение совсем не отвечает, &ndash;&gt;-->
                <!--&lt;!&ndash;через 10 секунд простаивания в очереди выбрасывается исключение и сервер разгружается&ndash;&gt;-->
                <!--&lt;!&ndash;от лишних запросов. Да, это исключение и это неприятно, однако лучше отвалится &ndash;&gt;-->
                <!--&lt;!&ndash;несколько клиентов (особенно если это DDoS'еры поганые) нежели сайт будет в полной отключке.&ndash;&gt;-->
                <!--<property name="checkoutTimeout" value="10000"/>-->
                <!--<property name="testConnectionOnCheckin" value="true"/>-->
                <!--<property name="acquireRetryAttempts" value="1"/>-->
                <!--<property name="acquireIncrement" value="3"/>-->
                <!--<property name="initialPoolSize" value="2"/>-->
                <!--<property name="maxIdleTime" value="18000"/>-->
                <!--<property name="minPoolSize" value="2"/>-->
            <!--</bean>-->
        <!--</property>-->
    <!--</bean>-->
</beans>